name: BUILD and Deploy - Prod

on:
  pull_request:
    types:
      - closed
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ROLE_TO_ASSUME: arn:aws:iam::455629891108:role/github-ecs-cessao-prod
  ECR_REPOSITORY: byx-roteador-contrato-prod

permissions:
  contents: read
  id-token: write

jobs:
  build-image:
    if: ${{ github.event.pull_request.merged }}
    runs-on: ubuntu-latest

    outputs:
      image_builded: ${{ steps.image-outputs.outputs.image }}
      short_sha: ${{ steps.sha-output.outputs.sha }}

    steps:
      - name: Get code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set short sha
        id: sha-output
        run: |
          echo "sha=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_OUTPUT

      - name: "Configure AWS Providers"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME}}
          role-session-name: ecr-${{ steps.sha-output.outputs.sha }}-push-image
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: "no"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push
        id: build-image-docker
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          provenance: false

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Image Output
        id: image-outputs
        run: |
          echo "image=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: validate env
        run: |
          echo "${{ steps.image-outputs.outputs.image }}"
          echo "${{ steps.sha-output.outputs.sha }}"

  deployment:
    runs-on: ubuntu-latest
    needs: build-image
    continue-on-error: true
    strategy:
      matrix:
        ecs-service:
          - "service-byx-roteador-contrato-prod"
        ecs-task-definition:
          - .github/workflows/task-definitions/prod/task-definition-roteador-contrato-prod.json
        ecs-cluster:
          - microservices-byx-capital-prod
        container_name:
          - container-byx-roteador-contrato-prod

    steps:
      - name: Get code
        uses: actions/checkout@v4

      - name: "Configure AWS Providers"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          role-session-name: task-${{ needs.build-image.outputs.short_sha }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Fill in the new image ID in the Amazon ECS task definition - ${{ matrix.ecs-service }}
        id: task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1

        with:
          task-definition: ${{ matrix.ecs-task-definition }}
          container-name: ${{ matrix.container_name }}
          image: ${{ needs.build-image.outputs.image_builded }}

      - name: Deploy Amazon ECS task definition - ${{ matrix.ecs-service }}
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-definition.outputs.task-definition }}
          service: ${{ matrix.ecs-service }}
          cluster: ${{ matrix.ecs-cluster }}
